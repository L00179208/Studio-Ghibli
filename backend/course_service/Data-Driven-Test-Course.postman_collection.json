{
	"info": {
		"_postman_id": "344e1a81-3918-41c8-a692-34d57ebd1eda",
		"name": "Data-Driven-Test-Course",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32483643"
	},
	"item": [
		{
			"name": "GetCourse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"var maliciousCourseId = \"52; DROP TABLE courses;\";",
							"",
							"var endpoint = pm.iterationData.get('endpoint');",
							"// GET Course with ID Send Request",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/7?extended=true&details=all', ",
							"    url: 'http://localhost:8884/' + endpoint,",
							"    //url: 'http://localhost:8884/' + maliciousCourseId,",
							"    method: 'GET', ",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    ",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // status code equal to 201 ",
							"    pm.test(\"Validate Status code 201 Check\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"    //Error Rate",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        let totalRequests = 1;",
							"        let errorRequests = res.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        const responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    // Parsing Data",
							"    var courseJson = res.json();",
							"",
							"    // Fetching expected Message",
							"    pm.test(\"Validate Response message 'Course has been fetched successfully'\", function () {",
							"        pm.expect(courseJson.message).to.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Checking 'data' object exists",
							"    pm.test(\"Validate Data Object and not empty\", function () {",
							"        pm.expect(courseJson).to.have.property(\"data\").and.to.be.an(\"object\").and.to.not.be.empty;",
							"    });",
							"",
							"    // Validating data object",
							"    pm.test(\"Attributes and Values are Validated in Data Object\", function () {",
							"        var courseData = courseJson.data;",
							"",
							"        pm.expect(courseData).to.have.property(\"id\").and.to.be.a(\"number\").and.to.eql(pm.iterationData.get('id'));",
							"        pm.expect(courseData).to.have.property(\"title\").and.to.be.a(\"string\").and.to.eql(pm.iterationData.get('title'));",
							"        pm.expect(courseData).to.have.property(\"description\").and.to.be.a(\"string\").and.to.eql(pm.iterationData.get('description'));",
							"        pm.expect(courseData).to.have.property(\"learning_outcomes\").and.to.be.a(\"string\").and.to.eql(pm.iterationData.get('learning_outcomes'));",
							"        pm.expect(courseData).to.have.property(\"course_inclusions\").and.to.be.a(\"string\").and.to.eql(pm.iterationData.get('course_inclusions'));",
							"        pm.expect(courseData).to.have.property(\"is_certified\").and.to.be.a(\"number\").and.to.eql(pm.iterationData.get('is_certified'));",
							"        pm.expect(courseData).to.have.property(\"author\").and.to.be.a(\"string\").and.to.eql(pm.iterationData.get('author'));",
							"        pm.expect(courseData).to.have.property(\"course_content\").and.to.be.a(\"string\").and.to.eql(pm.iterationData.get('course_content'));",
							"        pm.expect(courseData).to.have.property(\"rating\").and.to.be.a(\"number\").and.to.eql(pm.iterationData.get('rating'));",
							"        pm.expect(courseData).to.have.property(\"total_enrollments\").and.to.be.a(\"number\").and.to.eql(pm.iterationData.get('total_enrollments'));",
							"        pm.expect(courseData).to.have.property(\"status\").and.to.be.a(\"number\").and.to.eql(pm.iterationData.get('status'));",
							"        pm.expect(courseData).to.have.property(\"created_at\").and.to.be.a(\"string\");",
							"        pm.expect(courseData).to.have.property(\"updated_at\").and.to.be.a(\"string\");",
							"        pm.expect(courseData).to.have.property(\"chapters\").and.to.be.an(\"array\").and.to.be.empty;",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(res.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Checking if the data object has required number of items",
							"    pm.test(\"Validate data object contains required items\", function () {",
							"        var requiredDataCount = 14; ",
							"        var courseData = courseJson.data;",
							"",
							"        var dataCount = Object.keys(courseData).length;",
							"        pm.expect(dataCount).to.eql(requiredDataCount);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{courseURL}}/{{endpoint}}",
					"host": [
						"{{courseURL}}"
					],
					"path": [
						"{{endpoint}}"
					],
					"query": [
						{
							"key": "extended",
							"value": "true",
							"disabled": true
						},
						{
							"key": "details",
							"value": "all",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "AllCourses No Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"",
							"// GET Course with ID Send Request and handle response in callback",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/?order_by=id&sort=DESC&extended=true&details=all', ",
							"    url: 'http://localhost:8884/?order_by=id&sort=DESC',",
							"    method: 'GET', ",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // Validate 201 OK",
							"    pm.test(\"Validating Response 201 OK\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"    //Error Rate",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        let totalRequests = 1;",
							"        let errorRequests = res.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        const responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(res.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Parsing Data",
							"    var courseJson = res.json();",
							"    ",
							"    // Assertion for the count of items",
							"    pm.test(\"Asserting number of course items\", function () {",
							"        var expectedCount = 51; ",
							"        var courseItems = courseJson.data.length;",
							"        pm.expect(courseItems).to.eql(expectedCount);",
							"    });",
							"",
							"    // Validating successful message after fetch",
							"    pm.test(\"Validate Response successful message\", function () {",
							"        pm.expect(courseJson.message).to.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Validating data field existence",
							"    pm.test(\"Validate data entry is in Response\", function () {",
							"        pm.expect(courseJson).to.have.property(\"data\");",
							"        pm.expect(courseJson.data).to.be.an('array');",
							"    });",
							"",
							"    // validating the data properties in each course",
							"    pm.test(\"Validate the required properties in each course\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course).to.have.property(\"id\");",
							"            pm.expect(course).to.have.property(\"title\");",
							"            pm.expect(course).to.have.property(\"description\");",
							"            pm.expect(course).to.have.property(\"learning_outcomes\");",
							"            pm.expect(course).to.have.property(\"course_inclusions\");",
							"            pm.expect(course).to.have.property(\"is_certified\");",
							"            pm.expect(course).to.have.property(\"author\");",
							"            pm.expect(course).to.have.property(\"course_content\");",
							"            pm.expect(course).to.have.property(\"rating\");",
							"            pm.expect(course).to.have.property(\"total_enrollments\");",
							"            pm.expect(course).to.have.property(\"status\");",
							"            pm.expect(course).to.have.property(\"created_at\");",
							"            pm.expect(course).to.have.property(\"updated_at\");",
							"        });",
							"    });",
							"",
							"    // validate the format of learning_outcomes and course_inclusions",
							"    pm.test(\"Validate the format of learning_outcomes and course_inclusions\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.learning_outcomes).to.include(\"\\\"\");",
							"            pm.expect(course.course_inclusions).to.include(\"\\\"\");",
							"        });",
							"    });",
							"",
							"    // Validating the total enrollments to be a number",
							"    pm.test(\"Validate the total enrollments to be a number\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.total_enrollments).to.be.a('number');",
							"        });",
							"    });",
							"",
							"    // Validating the rating to be between 1 and 5",
							"    pm.test(\"Validating the rating to be between 1 and 5\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.rating).to.be.within(1, 5);",
							"        });",
							"    });",
							"",
							"    // Validate created_at and updated_at have proper formatted dates",
							"    pm.test(\"Validate created_at and updated_at have proper formatted dates\", function () {",
							"        var courseDates = courseJson.data;",
							"        courseDates.forEach(function(courseDate) {",
							"            pm.expect(courseDate.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"            pm.expect(courseDate.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"        });",
							"    });",
							"",
							"    // Validating the course items are sorted by id ASC",
							"    pm.test(\"Validate Course Items sorted by id ASC\", function () {",
							"        var courseItems = courseJson.data;",
							"        var courseSorted = true;",
							"        for (var i = 1; i < courseItems.length; i++) {",
							"            if (courseItems[i - 1].id > courseItems[i].id) {",
							"                courseSorted = false;",
							"                break;",
							"            }",
							"        }",
							"        pm.expect(courseSorted).to.be.true;",
							"    });",
							"",
							"    // Validating the course items are sorted by id DESC",
							"    pm.test(\"Validate Course Items sorted by id DESC\", function () {",
							"        var courseItems = courseJson.data;",
							"        var courseSorted = true;",
							"        for (var i = 0; i < courseItems.length - 1; i++) {",
							"            if (courseItems[i].id < courseItems[i + 1].id) {",
							"                courseSorted = false;",
							"                break;",
							"            }",
							"        }",
							"        pm.expect(courseSorted).to.be.true;",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{courseURL}}/?order_by=id&sort=DESC",
					"host": [
						"{{courseURL}}"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "order_by",
							"value": "id"
						},
						{
							"key": "sort",
							"value": "DESC"
						},
						{
							"key": "extended",
							"value": "true",
							"disabled": true
						},
						{
							"key": "details",
							"value": "all",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "AllCourses No Order Sort",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"// GET Course with ID Send Request and handle response in callback",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/?extended=true&details=all', ",
							"    url: 'http://localhost:8884/',",
							"    method: 'GET', ",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // Validate 201 OK",
							"    pm.test(\"Validating Response 201 OK\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"    //Error Rate",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        let totalRequests = 1;",
							"        let errorRequests = res.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        const responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(res.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Parsing Data",
							"    var courseJson = res.json();",
							"    ",
							"    // Assertion for the count of items",
							"    pm.test(\"Asserting number of course items\", function () {",
							"        var expectedCount = 41; ",
							"        var courseItems = courseJson.data.length;",
							"        pm.expect(courseItems).to.eql(expectedCount);",
							"    });",
							"",
							"    // Validating successful message after fetch",
							"    pm.test(\"Validate Response successful message\", function () {",
							"        pm.expect(courseJson.message).to.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Validating data field existence",
							"    pm.test(\"Validate data entry is in Response\", function () {",
							"        pm.expect(courseJson).to.have.property(\"data\");",
							"        pm.expect(courseJson.data).to.be.an('array');",
							"    });",
							"",
							"    // validating the data properties in each course",
							"    pm.test(\"Validate the required properties in each course\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course).to.have.property(\"id\");",
							"            pm.expect(course).to.have.property(\"title\");",
							"            pm.expect(course).to.have.property(\"description\");",
							"            pm.expect(course).to.have.property(\"learning_outcomes\");",
							"            pm.expect(course).to.have.property(\"course_inclusions\");",
							"            pm.expect(course).to.have.property(\"is_certified\");",
							"            pm.expect(course).to.have.property(\"author\");",
							"            pm.expect(course).to.have.property(\"course_content\");",
							"            pm.expect(course).to.have.property(\"rating\");",
							"            pm.expect(course).to.have.property(\"total_enrollments\");",
							"            pm.expect(course).to.have.property(\"status\");",
							"            pm.expect(course).to.have.property(\"created_at\");",
							"            pm.expect(course).to.have.property(\"updated_at\");",
							"        });",
							"    });",
							"",
							"    // validate the format of learning_outcomes and course_inclusions",
							"    pm.test(\"Validate the format of learning_outcomes and course_inclusions\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.learning_outcomes).to.include(\"\\\"\");",
							"            pm.expect(course.course_inclusions).to.include(\"\\\"\");",
							"        });",
							"    });",
							"",
							"    // Validating the total enrollments to be a number",
							"    pm.test(\"Validate the total enrollments to be a number\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.total_enrollments).to.be.a('number');",
							"        });",
							"    });",
							"",
							"    // Validating the rating to be between 1 and 5",
							"    pm.test(\"Validating the rating to be between 1 and 5\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.rating).to.be.within(1, 5);",
							"        });",
							"    });",
							"",
							"    // Validate created_at and updated_at have proper formatted dates",
							"    pm.test(\"Validate created_at and updated_at have proper formatted dates\", function () {",
							"        var courseDates = courseJson.data;",
							"        courseDates.forEach(function(courseDate) {",
							"            pm.expect(courseDate.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"            pm.expect(courseDate.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"        });",
							"    });",
							"",
							"    // Validating the course items are sorted by id ASC",
							"    pm.test(\"Validate Course Items sorted by id ASC\", function () {",
							"        var courseItems = courseJson.data;",
							"        var courseSorted = true;",
							"        for (var i = 1; i < courseItems.length; i++) {",
							"            if (courseItems[i - 1].id > courseItems[i].id) {",
							"                courseSorted = false;",
							"                break;",
							"            }",
							"        }",
							"        pm.expect(courseSorted).to.be.true;",
							"    });",
							"",
							"    // Validating the course items are sorted by id DESC",
							"    pm.test(\"Validate Course Items sorted by id DESC\", function () {",
							"        var courseItems = courseJson.data;",
							"        var courseSorted = true;",
							"        for (var i = 0; i < courseItems.length - 1; i++) {",
							"            if (courseItems[i].id < courseItems[i + 1].id) {",
							"                courseSorted = false;",
							"                break;",
							"            }",
							"        }",
							"        pm.expect(courseSorted).to.be.true;",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{courseURL}}/",
					"host": [
						"{{courseURL}}"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "extended",
							"value": "true",
							"disabled": true
						},
						{
							"key": "details",
							"value": "all",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EditCourse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"var updatedCourseData = {",
							"    \"title\": pm.iterationData.get('title'),",
							"    \"description\": pm.iterationData.get('description'),",
							"    \"course_content\": pm.iterationData.get('course_content'),",
							"    \"is_certified\": pm.iterationData.get('is_certified'),",
							"    \"status\": pm.iterationData.get('status'),",
							"    \"rating\": pm.iterationData.get('rating'), // Corrected",
							"    \"total_enrollments\": pm.iterationData.get('total_enrollments'),",
							"    \"author\": pm.iterationData.get('author')",
							"};",
							"",
							"",
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"var maliciousCourseId = \"52; DROP TABLE courses;\";",
							"// EDIT Course Send Request",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/4?extended=true&details=all', ",
							"    url: 'http://localhost:8884/4',",
							"    //url: 'http://localhost:8884/' + maliciousCourseId,",
							"    method: 'PUT', ",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(updatedCourseData)",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // Validate Response Status 201 OK",
							"    pm.test(\"Validate Response Status 201 OK\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been updated successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"",
							"    //Error Rate",
							"",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        //let totalRequests = pm.info.iterationCount;",
							"        let totalRequests = 1;",
							"        //let errorRequests = pm.iterationData.get(\"responseCode\") !== 201 ? 1 : 0;",
							"        let errorRequests = res.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(res.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Validating the updated Coures details",
							"    pm.test(\"Validate the Updated Course Response\", function () {",
							"        var courseData = res.json(); ",
							"        ",
							"        pm.expect(courseData.data.title).to.eql(updatedCourseData.title);",
							"        pm.expect(courseData.data.description).to.eql(updatedCourseData.description);",
							"        pm.expect(courseData.data.course_content).to.eql(updatedCourseData.course_content);",
							"        pm.expect(courseData.data.is_certified).to.eql(updatedCourseData.is_certified);",
							"        pm.expect(courseData.data.status).to.eql(updatedCourseData.status);",
							"        pm.expect(courseData.data.rating).to.eql(updatedCourseData.rating);",
							"        pm.expect(courseData.data.total_enrollments).to.eql(updatedCourseData.total_enrollments);",
							"        pm.expect(courseData.data.author).to.eql(updatedCourseData.author);",
							"    });",
							"",
							"    // Validate the Count of number of items in the data Object",
							"    pm.test(\"Validate the Count of number of items in the data Object\", function () {",
							"        var requiredDataCount = 13; ",
							"        var courseData = res.json().data;",
							"",
							"        var dataCount = Object.keys(courseData).length;",
							"        //console.log(data);",
							"        //console.log(Object.keys(data).length);",
							"",
							"        pm.expect(dataCount).to.eql(requiredDataCount);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{title}}\",\n    \"description\": \"{{description}}\",\n    \"course_content\": \"{{course_content}}\",\n    \"is_certified\": {{is_certified}},\n    \"status\": {{status}},\n    \"rating\": {{rating}},\n    \"total_enrollments\": {{total_enrollments}},\n    \"author\": \"{{author}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{courseURL}}/{{endpoint}}",
					"host": [
						"{{courseURL}}"
					],
					"path": [
						"{{endpoint}}"
					],
					"query": [
						{
							"key": "extended",
							"value": "true",
							"disabled": true
						},
						{
							"key": "details",
							"value": "all",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateCourse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var courseData = {",
							"    \"title\": pm.iterationData.get('title'),",
							"    \"course_content\": pm.iterationData.get('course_content'),",
							"    \"description\": pm.iterationData.get('description'),",
							"    \"learning_outcomes\": pm.iterationData.get('learning_outcomes'),",
							"    \"course_inclusions\": pm.iterationData.get('course_inclusions'),",
							"    \"total_enrollments\": pm.iterationData.get('total_enrollments'),",
							"    \"is_certified\": pm.iterationData.get('is_certified'),",
							"    \"author\": pm.iterationData.get('author'),",
							"    \"status\": pm.iterationData.get('status'),",
							"    \"rating\": pm.iterationData.get('rating')",
							"};",
							"",
							"",
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"// CREATE Course Send Request",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/create?extended=true&details=all', ",
							"    url: 'http://localhost:8884/create',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(courseData)",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // Validate Response Status 201 OK",
							"    pm.test(\"Validate Response Status 201 OK\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been created successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"",
							"    //Error Rate",
							"",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        //let totalRequests = pm.info.iterationCount;",
							"        let totalRequests = 1;",
							"        //let errorRequests = pm.iterationData.get(\"responseCode\") !== 201 ? 1 : 0;",
							"        let errorRequests = pm.response.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        const responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(res.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Validating the Create Coures Response",
							"    pm.test(\"Validate the Created Course Response\", function () {",
							"        var createdCourseData = res.json(); ",
							"        pm.expect(createdCourseData.data.title).to.eql(courseData.title);",
							"        pm.expect(createdCourseData.data.course_content).to.eql(courseData.course_content);",
							"        pm.expect(createdCourseData.data.description).to.eql(courseData.description);",
							"        pm.expect(createdCourseData.data.learning_outcomes).to.eql(courseData.learning_outcomes);",
							"        pm.expect(createdCourseData.data.course_inclusions).to.eql(courseData.course_inclusions);",
							"        pm.expect(createdCourseData.data.total_enrollments).to.eql(courseData.total_enrollments);",
							"        pm.expect(createdCourseData.data.is_certified).to.eql(courseData.is_certified);",
							"        pm.expect(createdCourseData.data.author).to.eql(courseData.author);",
							"        pm.expect(createdCourseData.data.status).to.eql(courseData.status);",
							"        pm.expect(createdCourseData.data.rating).to.eql(courseData.rating);",
							"    });",
							"",
							"    // Validate the Count of number of items in the data Object",
							"    pm.test(\"Validate the Count of number of items in the data Object\", function () {",
							"        var requiredDataCount = 13; ",
							"        var courseData = res.json().data;",
							"",
							"        var dataCount = Object.keys(courseData).length;",
							"        //console.log(data);",
							"        //console.log(Object.keys(data).length);",
							"",
							"        pm.expect(dataCount).to.eql(requiredDataCount);",
							"    });",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{courseURL}}/create",
					"host": [
						"{{courseURL}}"
					],
					"path": [
						"create"
					],
					"query": [
						{
							"key": "extended",
							"value": "true",
							"disabled": true
						},
						{
							"key": "details",
							"value": "all",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteCourse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"endpoint = pm.iterationData.get('endpoint');",
							"// Request Sent For Deletion of Course",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/9?extended=true&details=all', ",
							"    url: 'http://localhost:8884/' + endpoint, ",
							"    method: 'DELETE',",
							"    header: {",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // Validate Response Status 201 OK",
							"    pm.test(\"Validate Response Status 201 OK\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been trashed successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"",
							"    //Error Rate",
							"",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        //let totalRequests = pm.info.iterationCount;",
							"        let totalRequests = 1;",
							"        //let errorRequests = pm.iterationData.get(\"responseCode\") !== 201 ? 1 : 0;",
							"        let errorRequests = res.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        const responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Validate Response Message",
							"    pm.test(\"Validate Response Message 'Course has been trashed successfully'\", function () {",
							"        var responseData = res.json(); // Parse response JSON",
							"        pm.expect(responseData).to.have.property(\"message\", \"Course has been trashed successfully\");",
							"    });",
							"",
							"    // Validate Deleted Course Response Data",
							"    pm.test(\"Validate Deleted Course Response Data\", function () {",
							"        var courseData = res.json(); ",
							"        var deletedCourseData = courseData.data;",
							"        ",
							"        pm.expect(deletedCourseData.title).to.eql(pm.iterationData.get('title'));",
							"        pm.expect(deletedCourseData.description).to.eql(pm.iterationData.get('description'));",
							"        pm.expect(deletedCourseData.learning_outcomes).to.eql(pm.iterationData.get('learning_outcomes'));",
							"        pm.expect(deletedCourseData.course_inclusions).to.eql(pm.iterationData.get('course_inclusions'));",
							"        pm.expect(deletedCourseData.is_certified).to.eql(pm.iterationData.get('is_certified'));",
							"        pm.expect(deletedCourseData.author).to.eql(pm.iterationData.get('author'));",
							"        pm.expect(deletedCourseData.course_content).to.eql(pm.iterationData.get('course_content'));",
							"        pm.expect(deletedCourseData.rating).to.eql(pm.iterationData.get('rating'));",
							"        pm.expect(deletedCourseData.total_enrollments).to.eql(pm.iterationData.get('total_enrollments'));",
							"        pm.expect(deletedCourseData.status).to.eql(pm.iterationData.get('status'));",
							"        pm.expect(deletedCourseData).to.have.property(\"created_at\");",
							"        pm.expect(deletedCourseData).to.have.property(\"updated_at\");",
							"    });",
							"",
							"    // Validate the Count of number of items in the data Object",
							"    pm.test(\"Validate the Count of number of items in the data Object\", function () {",
							"        var requiredDataCount = 13; ",
							"        var courseData = res.json().data;",
							"",
							"        var dataCount = Object.keys(courseData).length;",
							"        //console.log(data);",
							"        //console.log(Object.keys(data).length);",
							"",
							"        pm.expect(dataCount).to.eql(requiredDataCount);",
							"    });",
							"",
							"",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{courseURL}}/{{endpoint}}",
					"host": [
						"{{courseURL}}"
					],
					"path": [
						"{{endpoint}}"
					],
					"query": [
						{
							"key": "extended",
							"value": "true",
							"disabled": true
						},
						{
							"key": "details",
							"value": "all",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "courseURL",
			"value": "http://localhost:8884"
		},
		{
			"key": "mockURL",
			"value": "https://a8155684-986f-43b1-9e47-944b32f8ad4e.mock.pstmn.io"
		}
	]
}