{
	"info": {
		"_postman_id": "9544d463-c966-4ced-884e-0e6cbdbc5f20",
		"name": "Docker-Mock-CourseAPI",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32483643"
	},
	"item": [
		{
			"name": "MockGetCourse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"var maliciousCourseId = \"52; DROP TABLE courses;\";",
							"// GET Course with ID Send Request",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/7?extended=true&details=all', ",
							"    url: 'http://localhost:8884/7',",
							"    //url: 'http://localhost:8884/' + maliciousCourseId,",
							"    method: 'GET', ",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    ",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // status code equal to 201 ",
							"    pm.test(\"Validate Status code 201 Check\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"    //Error Rate",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        let totalRequests = 1;",
							"        let errorRequests = res.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        const responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    // Parsing Data",
							"    var courseJson = res.json();",
							"",
							"    // Fetching expected Message",
							"    pm.test(\"Validate Response message 'Course has been fetched successfully'\", function () {",
							"        pm.expect(courseJson.message).to.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Checking 'data' object exists",
							"    pm.test(\"Validate Data Object and not empty\", function () {",
							"        pm.expect(courseJson).to.have.property(\"data\").and.to.be.an(\"object\").and.to.not.be.empty;",
							"    });",
							"",
							"    // Validating data object",
							"    pm.test(\"Attributes and Values are Validated in Data Object\", function () {",
							"        var courseData = courseJson.data;",
							"",
							"        pm.expect(courseData).to.have.property(\"id\").and.to.be.a(\"number\").and.to.eql(7);",
							"        pm.expect(courseData).to.have.property(\"title\").and.to.be.a(\"string\").and.to.eql(\"non\");",
							"        pm.expect(courseData).to.have.property(\"description\").and.to.be.a(\"string\").and.to.eql(\"maiores\");",
							"        pm.expect(courseData).to.have.property(\"learning_outcomes\").and.to.be.a(\"string\").and.to.eql(\"\\\"Molestiae incidunt qui quia omnis nisi cupiditate. Excepturi dolor omnis. Consequuntur impedit veritatis porro molestiae. Unde aperiam debitis est et.\\\"\");",
							"        pm.expect(courseData).to.have.property(\"course_inclusions\").and.to.be.a(\"string\").and.to.eql(\"\\\"Atque provident officiis nisi fuga. Non est molestiae. Voluptas et est. Rerum dolor iure non magni modi delectus est dolores. Facilis modi velit in architecto aut quis nihil quo. Voluptatem aut est ab est.\\\"\");",
							"        pm.expect(courseData).to.have.property(\"is_certified\").and.to.be.a(\"number\").and.to.eql(1);",
							"        pm.expect(courseData).to.have.property(\"author\").and.to.be.a(\"string\").and.to.eql(\"Pedro Mraz\");",
							"        pm.expect(courseData).to.have.property(\"course_content\").and.to.be.a(\"string\").and.to.eql(\"Quia aut doloribus nobis expedita sed non quia. Ipsa enim cumque iste in omnis autem. Quia enim velit odit.\");",
							"        pm.expect(courseData).to.have.property(\"rating\").and.to.be.a(\"number\").and.to.eql(3);",
							"        pm.expect(courseData).to.have.property(\"total_enrollments\").and.to.be.a(\"number\").and.to.eql(5);",
							"        pm.expect(courseData).to.have.property(\"status\").and.to.be.a(\"number\").and.to.eql(-1);",
							"        pm.expect(courseData).to.have.property(\"created_at\").and.to.be.a(\"string\");",
							"        pm.expect(courseData).to.have.property(\"updated_at\").and.to.be.a(\"string\");",
							"        pm.expect(courseData).to.have.property(\"chapters\").and.to.be.an(\"array\").and.to.be.empty;",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(res.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Checking if the data object has required number of items",
							"    pm.test(\"Validate data object contains required items\", function () {",
							"        var requiredDataCount = 14; ",
							"        var courseData = courseJson.data;",
							"",
							"        var dataCount = Object.keys(courseData).length;",
							"        pm.expect(dataCount).to.eql(requiredDataCount);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mockURL}}/getCourse/:id",
					"host": [
						"{{mockURL}}"
					],
					"path": [
						"getCourse",
						":id"
					],
					"variable": [
						{
							"key": "id",
							"value": "7"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MockAllCourses No Search",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"",
							"// GET Course with ID Send Request and handle response in callback",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/?order_by=id&sort=DESC&extended=true&details=all', ",
							"    url: 'http://localhost:8884/?order_by=id&sort=DESC',",
							"    method: 'GET', ",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // Validate 201 OK",
							"    pm.test(\"Validating Response 201 OK\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"    //Error Rate",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        let totalRequests = 1;",
							"        let errorRequests = res.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        const responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(res.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Parsing Data",
							"    var courseJson = res.json();",
							"    ",
							"    // Assertion for the count of items",
							"    pm.test(\"Asserting number of course items\", function () {",
							"        var expectedCount =43; ",
							"        var courseItems = courseJson.data.length;",
							"        pm.expect(courseItems).to.eql(expectedCount);",
							"    });",
							"",
							"    // Validating successful message after fetch",
							"    pm.test(\"Validate Response successful message\", function () {",
							"        pm.expect(courseJson.message).to.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Validating data field existence",
							"    pm.test(\"Validate data entry is in Response\", function () {",
							"        pm.expect(courseJson).to.have.property(\"data\");",
							"        pm.expect(courseJson.data).to.be.an('array');",
							"    });",
							"",
							"    // validating the data properties in each course",
							"    pm.test(\"Validate the required properties in each course\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course).to.have.property(\"id\");",
							"            pm.expect(course).to.have.property(\"title\");",
							"            pm.expect(course).to.have.property(\"description\");",
							"            pm.expect(course).to.have.property(\"learning_outcomes\");",
							"            pm.expect(course).to.have.property(\"course_inclusions\");",
							"            pm.expect(course).to.have.property(\"is_certified\");",
							"            pm.expect(course).to.have.property(\"author\");",
							"            pm.expect(course).to.have.property(\"course_content\");",
							"            pm.expect(course).to.have.property(\"rating\");",
							"            pm.expect(course).to.have.property(\"total_enrollments\");",
							"            pm.expect(course).to.have.property(\"status\");",
							"            pm.expect(course).to.have.property(\"created_at\");",
							"            pm.expect(course).to.have.property(\"updated_at\");",
							"        });",
							"    });",
							"",
							"    // validate the format of learning_outcomes and course_inclusions",
							"    pm.test(\"Validate the format of learning_outcomes and course_inclusions\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.learning_outcomes).to.include(\"\\\"\");",
							"            pm.expect(course.course_inclusions).to.include(\"\\\"\");",
							"        });",
							"    });",
							"",
							"    // Validating the total enrollments to be a number",
							"    pm.test(\"Validate the total enrollments to be a number\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.total_enrollments).to.be.a('number');",
							"        });",
							"    });",
							"",
							"    // Validating the rating to be between 1 and 5",
							"    pm.test(\"Validating the rating to be between 1 and 5\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.rating).to.be.within(1, 5);",
							"        });",
							"    });",
							"",
							"    // Validate created_at and updated_at have proper formatted dates",
							"    pm.test(\"Validate created_at and updated_at have proper formatted dates\", function () {",
							"        var courseDates = courseJson.data;",
							"        courseDates.forEach(function(courseDate) {",
							"            pm.expect(courseDate.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"            pm.expect(courseDate.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"        });",
							"    });",
							"",
							"    // Validating the course items are sorted by id ASC",
							"    pm.test(\"Validate Course Items sorted by id ASC\", function () {",
							"        var courseItems = courseJson.data;",
							"        var courseSorted = true;",
							"        for (var i = 1; i < courseItems.length; i++) {",
							"            if (courseItems[i - 1].id > courseItems[i].id) {",
							"                courseSorted = false;",
							"                break;",
							"            }",
							"        }",
							"        pm.expect(courseSorted).to.be.true;",
							"    });",
							"",
							"    // Validating the course items are sorted by id DESC",
							"    pm.test(\"Validate Course Items sorted by id DESC\", function () {",
							"        var courseItems = courseJson.data;",
							"        var courseSorted = true;",
							"        for (var i = 0; i < courseItems.length - 1; i++) {",
							"            if (courseItems[i].id < courseItems[i + 1].id) {",
							"                courseSorted = false;",
							"                break;",
							"            }",
							"        }",
							"        pm.expect(courseSorted).to.be.true;",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mockURL}}/getAllCourse?order_by=id&sort=DESC",
					"host": [
						"{{mockURL}}"
					],
					"path": [
						"getAllCourse"
					],
					"query": [
						{
							"key": "order_by",
							"value": "id"
						},
						{
							"key": "sort",
							"value": "DESC"
						},
						{
							"key": "extended",
							"value": "true",
							"disabled": true
						},
						{
							"key": "details",
							"value": "all",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MockAllCourses",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"// GET Course with ID Send Request and handle response in callback",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/?extended=true&details=all', ",
							"    url: 'http://localhost:8884/',",
							"    method: 'GET', ",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // Validate 201 OK",
							"    pm.test(\"Validating Response 201 OK\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"    //Error Rate",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        let totalRequests = 1;",
							"        let errorRequests = res.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        const responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(res.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Parsing Data",
							"    var courseJson = res.json();",
							"    ",
							"    // Assertion for the count of items",
							"    pm.test(\"Asserting number of course items\", function () {",
							"        var expectedCount = 41; ",
							"        var courseItems = courseJson.data.length;",
							"        pm.expect(courseItems).to.eql(expectedCount);",
							"    });",
							"",
							"    // Validating successful message after fetch",
							"    pm.test(\"Validate Response successful message\", function () {",
							"        pm.expect(courseJson.message).to.eql(\"Course has been fetched successfully\");",
							"    });",
							"",
							"    // Validating data field existence",
							"    pm.test(\"Validate data entry is in Response\", function () {",
							"        pm.expect(courseJson).to.have.property(\"data\");",
							"        pm.expect(courseJson.data).to.be.an('array');",
							"    });",
							"",
							"    // validating the data properties in each course",
							"    pm.test(\"Validate the required properties in each course\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course).to.have.property(\"id\");",
							"            pm.expect(course).to.have.property(\"title\");",
							"            pm.expect(course).to.have.property(\"description\");",
							"            pm.expect(course).to.have.property(\"learning_outcomes\");",
							"            pm.expect(course).to.have.property(\"course_inclusions\");",
							"            pm.expect(course).to.have.property(\"is_certified\");",
							"            pm.expect(course).to.have.property(\"author\");",
							"            pm.expect(course).to.have.property(\"course_content\");",
							"            pm.expect(course).to.have.property(\"rating\");",
							"            pm.expect(course).to.have.property(\"total_enrollments\");",
							"            pm.expect(course).to.have.property(\"status\");",
							"            pm.expect(course).to.have.property(\"created_at\");",
							"            pm.expect(course).to.have.property(\"updated_at\");",
							"        });",
							"    });",
							"",
							"    // validate the format of learning_outcomes and course_inclusions",
							"    pm.test(\"Validate the format of learning_outcomes and course_inclusions\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.learning_outcomes).to.include(\"\\\"\");",
							"            pm.expect(course.course_inclusions).to.include(\"\\\"\");",
							"        });",
							"    });",
							"",
							"    // Validating the total enrollments to be a number",
							"    pm.test(\"Validate the total enrollments to be a number\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.total_enrollments).to.be.a('number');",
							"        });",
							"    });",
							"",
							"    // Validating the rating to be between 1 and 5",
							"    pm.test(\"Validating the rating to be between 1 and 5\", function () {",
							"        var courses = courseJson.data;",
							"        courses.forEach(function(course) {",
							"            pm.expect(course.rating).to.be.within(1, 5);",
							"        });",
							"    });",
							"",
							"    // Validate created_at and updated_at have proper formatted dates",
							"    pm.test(\"Validate created_at and updated_at have proper formatted dates\", function () {",
							"        var courseDates = courseJson.data;",
							"        courseDates.forEach(function(courseDate) {",
							"            pm.expect(courseDate.created_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"            pm.expect(courseDate.updated_at).to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d{3}Z$/);",
							"        });",
							"    });",
							"",
							"    // Validating the course items are sorted by id ASC",
							"    pm.test(\"Validate Course Items sorted by id ASC\", function () {",
							"        var courseItems = courseJson.data;",
							"        var courseSorted = true;",
							"        for (var i = 1; i < courseItems.length; i++) {",
							"            if (courseItems[i - 1].id > courseItems[i].id) {",
							"                courseSorted = false;",
							"                break;",
							"            }",
							"        }",
							"        pm.expect(courseSorted).to.be.true;",
							"    });",
							"",
							"    // Validating the course items are sorted by id DESC",
							"    pm.test(\"Validate Course Items sorted by id DESC\", function () {",
							"        var courseItems = courseJson.data;",
							"        var courseSorted = true;",
							"        for (var i = 0; i < courseItems.length - 1; i++) {",
							"            if (courseItems[i].id < courseItems[i + 1].id) {",
							"                courseSorted = false;",
							"                break;",
							"            }",
							"        }",
							"        pm.expect(courseSorted).to.be.true;",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mockURL}}/getAllCourse",
					"host": [
						"{{mockURL}}"
					],
					"path": [
						"getAllCourse"
					],
					"query": [
						{
							"key": "extended",
							"value": "true",
							"disabled": true
						},
						{
							"key": "details",
							"value": "all",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MockEditCourse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var updatedCourseData = {",
							"    \"title\": pm.variables.replaceIn(\"{{$randomLoremWord}}\"),",
							"    \"description\": pm.variables.replaceIn(\"{{$randomLoremParagraph}}\"),",
							"    \"course_content\": pm.variables.replaceIn(\"{{$randomLoremParagraph}}\"),",
							"    \"is_certified\": 1,",
							"    \"status\": 1,",
							"    \"rating\": 2,",
							"    \"total_enrollments\": 6,",
							"    \"author\": pm.variables.replaceIn(\"{{$randomFullName}}\")",
							"};",
							"",
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"var maliciousCourseId = \"52; DROP TABLE courses;\";",
							"// EDIT Course Send Request",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/4?extended=true&details=all', ",
							"    url: 'http://localhost:8884/4',",
							"    //url: 'http://localhost:8884/' + maliciousCourseId,",
							"    method: 'PUT', ",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(updatedCourseData)",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // Validate Response Status 201 OK",
							"    pm.test(\"Validate Response Status 201 OK\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been updated successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"",
							"    //Error Rate",
							"",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        //let totalRequests = pm.info.iterationCount;",
							"        let totalRequests = 1;",
							"        //let errorRequests = pm.iterationData.get(\"responseCode\") !== 201 ? 1 : 0;",
							"        let errorRequests = res.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(res.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Validating the updated Coures details",
							"    pm.test(\"Validate the Updated Course Response\", function () {",
							"        var courseData = res.json(); ",
							"        ",
							"        pm.expect(courseData.data.title).to.eql(updatedCourseData.title);",
							"        pm.expect(courseData.data.description).to.eql(updatedCourseData.description);",
							"        pm.expect(courseData.data.course_content).to.eql(updatedCourseData.course_content);",
							"        pm.expect(courseData.data.is_certified).to.eql(updatedCourseData.is_certified);",
							"        pm.expect(courseData.data.status).to.eql(updatedCourseData.status);",
							"        pm.expect(courseData.data.rating).to.eql(updatedCourseData.rating);",
							"        pm.expect(courseData.data.total_enrollments).to.eql(updatedCourseData.total_enrollments);",
							"        pm.expect(courseData.data.author).to.eql(updatedCourseData.author);",
							"    });",
							"",
							"    // Validate the Count of number of items in the data Object",
							"    pm.test(\"Validate the Count of number of items in the data Object\", function () {",
							"        var requiredDataCount = 13; ",
							"        var courseData = res.json().data;",
							"",
							"        var dataCount = Object.keys(courseData).length;",
							"        //console.log(data);",
							"        //console.log(Object.keys(data).length);",
							"",
							"        pm.expect(dataCount).to.eql(requiredDataCount);",
							"    });",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{$randomLoremWord}}\",\n    \"description\": \"{{$randomLoremParagraph}}\",\n    \"course_content\": \"{{$randomLoremParagraph}}\",\n    \"is_certified\": 1,\n    \"status\": 1,\n    \"rating\": 2,\n    \"total_enrollments\": 6,\n    \"author\": \"{{$randomFullName}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mockURL}}/editCourse/:id",
					"host": [
						"{{mockURL}}"
					],
					"path": [
						"editCourse",
						":id"
					],
					"query": [
						{
							"key": "extended",
							"value": "true",
							"disabled": true
						},
						{
							"key": "details",
							"value": "all",
							"disabled": true
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "4"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MockCreateCourse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var courseData = {",
							"    \"title\": pm.variables.replaceIn(\"{{$randomLoremWord}}\"),",
							"    \"course_content\": pm.variables.replaceIn(\"{{$randomLoremText}}\"),",
							"    \"description\": pm.variables.replaceIn(\"{{$randomLoremWord}}\"),",
							"    \"learning_outcomes\": pm.variables.replaceIn(\"{{$randomLoremParagraph}}\"),",
							"    \"course_inclusions\": pm.variables.replaceIn(\"{{$randomLoremSentences}}\"),",
							"    \"total_enrollments\": 7,",
							"    \"is_certified\": 1,",
							"    \"author\": pm.variables.replaceIn(\"{{$randomFullName}}\"),",
							"    \"status\": 1,",
							"    \"rating\": 3",
							"};",
							"",
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"// CREATE Course Send Request",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/create?extended=true&details=all', ",
							"    url: 'http://localhost:8884/create',",
							"    method: 'POST',",
							"    header: {",
							"        'Content-Type': 'application/json',",
							"    },",
							"    body: {",
							"        mode: 'raw',",
							"        raw: JSON.stringify(courseData)",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // Validate Response Status 201 OK",
							"    pm.test(\"Validate Response Status 201 OK\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been created successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"",
							"    //Error Rate",
							"",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        //let totalRequests = pm.info.iterationCount;",
							"        let totalRequests = 1;",
							"        //let errorRequests = pm.iterationData.get(\"responseCode\") !== 201 ? 1 : 0;",
							"        let errorRequests = pm.response.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        const responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(res.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Validating the Create Coures Response",
							"    pm.test(\"Validate the Created Course Response\", function () {",
							"        var createdCourseData = res.json(); ",
							"        pm.expect(createdCourseData.data.title).to.eql(courseData.title);",
							"        pm.expect(createdCourseData.data.course_content).to.eql(courseData.course_content);",
							"        pm.expect(createdCourseData.data.description).to.eql(courseData.description);",
							"        pm.expect(createdCourseData.data.learning_outcomes).to.eql(courseData.learning_outcomes);",
							"        pm.expect(createdCourseData.data.course_inclusions).to.eql(courseData.course_inclusions);",
							"        pm.expect(createdCourseData.data.total_enrollments).to.eql(courseData.total_enrollments);",
							"        pm.expect(createdCourseData.data.is_certified).to.eql(courseData.is_certified);",
							"        pm.expect(createdCourseData.data.author).to.eql(courseData.author);",
							"        pm.expect(createdCourseData.data.status).to.eql(courseData.status);",
							"        pm.expect(createdCourseData.data.rating).to.eql(courseData.rating);",
							"    });",
							"",
							"    // Validate the Count of number of items in the data Object",
							"    pm.test(\"Validate the Count of number of items in the data Object\", function () {",
							"        var requiredDataCount = 13; ",
							"        var courseData = res.json().data;",
							"",
							"        var dataCount = Object.keys(courseData).length;",
							"        //console.log(data);",
							"        //console.log(Object.keys(data).length);",
							"",
							"        pm.expect(dataCount).to.eql(requiredDataCount);",
							"    });",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"{{$randomLoremWord}}\",\n    \"description\": \"{{$randomLoremWord}}\",\n    \"course_content\": \"{{$randomLoremText}}\",\n    \"learning_outcomes\": \"{{$randomLoremParagraph}}\",\n    \"course_inclusions\": \"{{$randomLoremSentences}}\",\n    \"total_enrollments\": 5,\n    \"is_certified\": 1,\n    \"author\": \"{{$randomFullName}}\",\n    \"status\": 1,\n    \"rating\": 3\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{mockURL}}/createCourse",
					"host": [
						"{{mockURL}}"
					],
					"path": [
						"createCourse"
					],
					"query": [
						{
							"key": "extended",
							"value": "true",
							"disabled": true
						},
						{
							"key": "details",
							"value": "all",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "MockDeleteCourse",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Request Time Timestamp",
							"pm.variables.set(\"requestTime\", new Date().getTime());",
							"",
							"// Request Sent For Deletion of Course",
							"pm.sendRequest({",
							"    //url: 'http://localhost:8884/9?extended=true&details=all', ",
							"    url: 'http://localhost:8884/9', ",
							"    method: 'DELETE',",
							"    header: {",
							"    }",
							"}, function (err, res) {",
							"    if (err) {",
							"        console.error(err);",
							"        return;",
							"    }",
							"",
							"    // Validate Response Status 201 OK",
							"    pm.test(\"Validate Response Status 201 OK\", function () {",
							"        pm.expect(res).to.have.status(201);",
							"    });",
							"",
							"    //Checking Failure Test Case - Response message",
							"    pm.test(\"Validate Response Message indicates failure\", function () {",
							"        var jsonData = res.json();",
							"        pm.expect(jsonData).to.have.property(\"message\").to.not.eql(\"Course has been trashed successfully\");",
							"    });",
							"",
							"    // Performance TEST - response + Throughput + error rate + latency",
							"",
							"    // Response time less than 500ms",
							"    pm.test(\"Performance Test response time less than 300ms\", function () {",
							"        pm.expect(res.responseTime).to.be.below(300);",
							"    });",
							"",
							"    //Throughput",
							"    pm.test(\"Performance Test Throughput\", function () {",
							"        const requestsPerSecond = pm.info.iterationCount / res.responseTime / 1000;",
							"        console.log(\"Requests per second: \" + requestsPerSecond);",
							"    });",
							"",
							"",
							"    //Error Rate",
							"",
							"    pm.test(\"Performance Test Error Rate\", function () {",
							"        //let totalRequests = pm.info.iterationCount;",
							"        let totalRequests = 1;",
							"        //let errorRequests = pm.iterationData.get(\"responseCode\") !== 201 ? 1 : 0;",
							"        let errorRequests = res.code !== 201 ? 1 : 0;",
							"        let errorRate = (errorRequests / totalRequests) * 100;",
							"        console.log(\"Error rate: \" + errorRate + \"%\");",
							"        pm.expect(errorRate).to.be.eq(0);",
							"    });",
							"",
							"",
							"    //Latency",
							"    pm.test(\"Performance Test Latency\", function () {",
							"        const requestTime = pm.variables.get(\"requestTime\");",
							"        //const responseTime = new Date().getTime();",
							"        const responseTime = res.responseTime;",
							"        const latency = responseTime - requestTime;",
							"        console.log(\"Latency: \" + latency + \"ms\");",
							"        pm.expect(latency).to.be.lt(100);",
							"    });",
							"",
							"    //Response Headers",
							"",
							"    // Checking Header",
							"    pm.test(\"Response-Header Validation Content-Type header\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"    });",
							"",
							"    // Checking Connection value",
							"    pm.test(\"Response-Header Validation Connection Value\", function () {",
							"        pm.expect(res.headers.get(\"Connection\")).to.include(\"keep-alive\");",
							"    });",
							"",
							"    // Checking Content Header Value",
							"    pm.test(\"Response-Header Validation Content-Type header has expected value\", function () {",
							"        pm.expect(res).to.have.header(\"Content-Type\");",
							"        pm.expect(pm.response.headers.get(\"Content-Type\")).to.match(/application\\/json;\\s*charset=utf-8/);",
							"    });",
							"",
							"    // Validate Response Message",
							"    pm.test(\"Validate Response Message 'Course has been trashed successfully'\", function () {",
							"        var responseData = res.json(); // Parse response JSON",
							"        pm.expect(responseData).to.have.property(\"message\", \"Course has been trashed successfully\");",
							"    });",
							"",
							"    // Validate Deleted Course Response Data",
							"    pm.test(\"Validate Deleted Course Response Data\", function () {",
							"        var courseData = res.json(); ",
							"        var deletedCourseData = courseData.data;",
							"        ",
							"        pm.expect(deletedCourseData.title).to.eql(\"est\");",
							"        pm.expect(deletedCourseData.description).to.eql(\"veniam\");",
							"        pm.expect(deletedCourseData.learning_outcomes).to.eql(\"\\\"Odio eaque ut accusamus quia quos aspernatur alias. Corporis porro ab nisi aut iste itaque est corporis. Necessitatibus doloremque doloribus ea voluptatem tempore soluta.\\\"\");",
							"        pm.expect(deletedCourseData.course_inclusions).to.eql(\"\\\"Saepe corporis vitae animi iusto nostrum beatae soluta qui. Soluta non nemo dolor dolorem consequatur voluptatibus consequatur distinctio. Voluptas quidem dolores aspernatur cumque. Corrupti hic cumque. Vitae hic perferendis consequatur et dolorem minus dolor. Vel quod architecto non quod id.\\\"\");",
							"        pm.expect(deletedCourseData.is_certified).to.eql(1);",
							"        pm.expect(deletedCourseData.author).to.eql(\"Kevin Goodwin MD\");",
							"        pm.expect(deletedCourseData.course_content).to.eql(\"Occaecati aut similique. Mollitia aut quod voluptatibus nisi. Voluptatum voluptatum quos est.\");",
							"        pm.expect(deletedCourseData.rating).to.eql(3);",
							"        pm.expect(deletedCourseData.total_enrollments).to.eql(5);",
							"        pm.expect(deletedCourseData.status).to.eql(\"-1\");",
							"        pm.expect(deletedCourseData).to.have.property(\"created_at\");",
							"        pm.expect(deletedCourseData).to.have.property(\"updated_at\");",
							"    });",
							"",
							"    // Validate the Count of number of items in the data Object",
							"    pm.test(\"Validate the Count of number of items in the data Object\", function () {",
							"        var requiredDataCount = 13; ",
							"        var courseData = res.json().data;",
							"",
							"        var dataCount = Object.keys(courseData).length;",
							"        //console.log(data);",
							"        //console.log(Object.keys(data).length);",
							"",
							"        pm.expect(dataCount).to.eql(requiredDataCount);",
							"    });",
							"",
							"",
							"",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{mockURL}}/deleteCourse",
					"host": [
						"{{mockURL}}"
					],
					"path": [
						"deleteCourse"
					],
					"query": [
						{
							"key": "extended",
							"value": "true",
							"disabled": true
						},
						{
							"key": "details",
							"value": "all",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "mockURL",
			"value": "https://a8155684-986f-43b1-9e47-944b32f8ad4e.mock.pstmn.io"
		}
	]
}