name: Terraform CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  terraform:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest

    steps:
    - name: 'Checkout Repository'
      uses: actions/checkout@v2

    - name: 'Set Up Terraform'
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.0.9

    - name: 'Install Terrascan'
      run: |
        curl -L https://github.com/tenable/terrascan/releases/download/v1.19.1/terrascan_1.19.1_Linux_x86_64.tar.gz -o terrascan.tar.gz
        tar -xzf terrascan.tar.gz
        chmod +x terrascan
        sudo mv terrascan /usr/local/bin/terrascan
        terrascan version

    - name: 'List Directory Contents'
      run: ls -la ./iac

    - name: 'Run Terrascan'
      run: terrascan scan -i terraform -d ./iac
      continue-on-error: true # Temporarily allow pipeline to continue on error for debugging

    - name: 'Terraform Init'
      working-directory: ./iac
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init

    - name: 'Terraform Validate'
      working-directory: ./iac
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform validate

    - name: 'Terraform Plan'
      working-directory: ./iac
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform plan

    - name: 'Terraform Apply'
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      working-directory: ./iac
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform apply -auto-approve
