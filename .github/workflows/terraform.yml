name: Terraform CI/CD

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  PRIVATE_SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

jobs:
  build-and-push-images:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          set -e

          build_and_push() {
            local service_directory=$1
            local service_name=$2

            if [ -d "$service_directory" ]; then
              cd $service_directory
              docker build -t $DOCKER_USERNAME/sgproject:$service_name -f Dockerfiles/Dockerfile .
              docker tag $DOCKER_USERNAME/sgproject:$service_name $DOCKER_USERNAME/sgproject:$service_name-$IMAGE_TAG
              echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
              docker push $DOCKER_USERNAME/sgproject:$service_name-$IMAGE_TAG
              cd $( [[ "$service_directory" == "frontend/studio-ghibli" || "$service_directory" == "backend"* ]] && echo "../.." || echo ".." )
            else
              echo "Directory $service_directory not found."
              exit 1
            fi
          }

          build_and_push "admin_frontend" "admin_frontend"
          # Uncomment these lines as needed
          # build_and_push "frontend/studio-ghibli" "studio_ghibli_frontend"
          # build_and_push "backend/gateway" "gateway"
          # build_and_push "backend/courses" "courses"
          # build_and_push "backend/enrollment" "enrollment"
          # build_and_push "backend/customers" "customers"
          # build_and_push "backend/users" "users"

  terraform-build:
    name: 'Terraform Plan and Apply'
    runs-on: ubuntu-latest
    outputs:
      instance_public_ip: ${{ steps.get_ip.outputs.instance_public_ip }}
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v2

      - name: 'Set Up Terraform'
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.9

      - name: 'Install Terrascan'
        run: |
          curl -L https://github.com/tenable/terrascan/releases/download/v1.19.1/terrascan_1.19.1_Linux_x86_64.tar.gz -o terrascan.tar.gz
          tar -xzf terrascan.tar.gz
          chmod +x terrascan
          sudo mv terrascan /usr/local/bin/terrascan
          terrascan version

      - name: 'List Directory Contents'
        run: ls -la ./iac

      - name: 'Run Terrascan'
        run: terrascan scan -i terraform -d ./iac
        continue-on-error: true

      - name: 'Terraform Init'
        working-directory: ./iac
        run: terraform init

      - name: 'Terraform Validate'
        working-directory: ./iac
        run: terraform validate

      - name: 'Terraform Plan'
        working-directory: ./iac
        run: terraform plan

      - name: 'Terraform Apply'
        working-directory: ./iac
        id: apply
        run: terraform apply -auto-approve

      - name: 'Get Terraform Output'
        id: get_ip
        working-directory: ./iac
        run: |
          instance_ip=$(terraform output -raw instance_public_ip)
          echo "instance_public_ip=$instance_ip" >> $GITHUB_ENV
          echo "::set-output name=instance_public_ip::$instance_ip"

  deploy:
    runs-on: ubuntu-latest
    needs: [terraform-build, build-and-push-images]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > deploy_key
          chmod 600 deploy_key

      - name: Connect to EC2 instance via SSH
        run: |
          echo "Connecting to ${{ needs.terraform-build.outputs.instance_public_ip }}"
          ssh -o StrictHostKeyChecking=no -i deploy_key ubuntu@${{ needs.terraform-build.outputs.instance_public_ip }}

      - name: Pull Docker images
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Pulling Docker images on ${{ needs.terraform-build.outputs.instance_public_ip }}"
          ssh -o StrictHostKeyChecking=no -i deploy_key ubuntu@${{ needs.terraform-build.outputs.instance_public_ip }} << EOF
            docker pull $DOCKER_USERNAME/sgproject:admin_frontend-$IMAGE_TAG
            # Uncomment these lines as needed
            # docker pull $DOCKER_USERNAME/sgproject:studio_ghibli_frontend-$IMAGE_TAG
            # docker pull $DOCKER_USERNAME/sgproject:gateway-$IMAGE_TAG
            # docker pull $DOCKER_USERNAME/sgproject:courses-$IMAGE_TAG
            # docker pull $DOCKER_USERNAME/sgproject:enrollment-$IMAGE_TAG
            # docker pull $DOCKER_USERNAME/sgproject:customers-$IMAGE_TAG
            # docker pull $DOCKER_USERNAME/sgproject:users-$IMAGE_TAG
          EOF

      - name: Run Docker containers
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Running Docker containers on ${{ needs.terraform-build.outputs.instance_public_ip }}"
          ssh -o StrictHostKeyChecking=no -i deploy_key ubuntu@${{ needs.terraform-build.outputs.instance_public_ip }} << EOF
            # Uncomment these lines as needed
            # docker run -d -p 80:80 $DOCKER_USERNAME/sgproject:studio_ghibli_frontend-$IMAGE_TAG
            docker run -d -p 8080:8080 $DOCKER_USERNAME/sgproject:admin_frontend-$IMAGE_TAG
            # docker run -d -p 8880:8880 $DOCKER_USERNAME/sgproject:gateway-$IMAGE_TAG
            # docker run -d -p 8881:8881 $DOCKER_USERNAME/sgproject:courses-$IMAGE_TAG
            # docker run -d -p 8882:8882 $DOCKER_USERNAME/sgproject:enrollment-$IMAGE_TAG
            # docker run -d -p 8883:8883 $DOCKER_USERNAME/sgproject:customers-$IMAGE_TAG
            # docker run -d -p 8884:8884 $DOCKER_USERNAME/sgproject:users-$IMAGE_TAG
          EOF